#!/usr/bin/env python3
"""
GitHub Engineering Activity Report Generator
Generates comprehensive HTML reports of developer activity across GitHub organizations.
"""

import argparse
import json
import subprocess
import sys
import os
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, List, Set, Optional
from odoo_api import OdooAPI


def run_gh_command(query: str) -> dict:
    """Execute a GitHub GraphQL query using gh CLI."""
    cmd = ['gh', 'api', 'graphql', '-f', f'query={query}']
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error executing gh command: {e.stderr}", file=sys.stderr)
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON response: {e}", file=sys.stderr)
        sys.exit(1)


def fetch_recent_activity(orgs: List[str], since_date: str) -> Dict:
    """Fetch issues and PRs updated since the given date."""
    org_query = ' '.join(f'org:{org}' for org in orgs)

    # Fetch issues
    issues_query = f'''
    {{
      search(query: "{org_query} is:issue updated:>={since_date}", type: ISSUE, first: 100) {{
        issueCount
        edges {{
          node {{
            ... on Issue {{
              number
              title
              url
              createdAt
              updatedAt
              state
              body
              repository {{
                nameWithOwner
              }}
              author {{
                login
              }}
              comments(first: 50) {{
                totalCount
                nodes {{
                  author {{
                    login
                  }}
                  createdAt
                  updatedAt
                  url
                  body
                }}
              }}
            }}
          }}
        }}
      }}
    }}
    '''

    # Fetch PRs
    prs_query = f'''
    {{
      search(query: "{org_query} is:pr updated:>={since_date}", type: ISSUE, first: 100) {{
        issueCount
        edges {{
          node {{
            ... on PullRequest {{
              number
              title
              url
              createdAt
              updatedAt
              mergedAt
              closedAt
              state
              body
              repository {{
                nameWithOwner
              }}
              author {{
                login
              }}
              comments(first: 50) {{
                totalCount
                nodes {{
                  author {{
                    login
                  }}
                  createdAt
                  updatedAt
                  url
                  body
                }}
              }}
              reviews(first: 50) {{
                totalCount
                nodes {{
                  author {{
                    login
                  }}
                  createdAt
                  state
                }}
              }}
            }}
          }}
        }}
      }}
    }}
    '''

    print("Fetching issues...", file=sys.stderr)
    issues_data = run_gh_command(issues_query)

    print("Fetching PRs...", file=sys.stderr)
    prs_data = run_gh_command(prs_query)

    return {
        'issues': issues_data,
        'prs': prs_data
    }


def aggregate_by_developer(data: Dict, filter_devs: Set[str] = None) -> Dict:
    """Aggregate all activity by developer."""
    developer_activity = defaultdict(lambda: {
        'issues_created': [],
        'issues_commented': [],
        'prs_created': [],
        'prs_reviewed': [],
        'prs_commented': [],
        'repos': set(),
        'by_repo': defaultdict(lambda: {
            'issues_created': [],
            'issues_commented': [],
            'prs_created': [],
            'prs_reviewed': [],
            'prs_commented': []
        }),
        'total_comments': 0,
        'total_issues': 0,
        'total_prs': 0,
        'total_reviews': 0
    })

    # Process issues
    for edge in data['issues']['data']['search']['edges']:
        issue = edge['node']
        author = issue['author']['login'] if issue['author'] else 'ghost'

        if filter_devs and author not in filter_devs:
            # Still check comments even if author is filtered
            pass
        else:
            repo_name = issue['repository']['nameWithOwner']
            developer_activity[author]['issues_created'].append(issue)
            developer_activity[author]['repos'].add(repo_name)
            developer_activity[author]['by_repo'][repo_name]['issues_created'].append(issue)
            developer_activity[author]['total_issues'] += 1

        # Process issue comments
        for comment in issue['comments']['nodes']:
            commenter = comment['author']['login'] if comment['author'] else 'ghost'
            if not filter_devs or commenter in filter_devs:
                repo_name = issue['repository']['nameWithOwner']
                comment_data = {'issue': issue, 'comment': comment}
                developer_activity[commenter]['issues_commented'].append(comment_data)
                developer_activity[commenter]['repos'].add(repo_name)
                developer_activity[commenter]['by_repo'][repo_name]['issues_commented'].append(comment_data)
                developer_activity[commenter]['total_comments'] += 1

    # Process PRs
    for edge in data['prs']['data']['search']['edges']:
        pr = edge['node']
        author = pr['author']['login'] if pr['author'] else 'ghost'

        if filter_devs and author not in filter_devs:
            pass
        else:
            repo_name = pr['repository']['nameWithOwner']
            developer_activity[author]['prs_created'].append(pr)
            developer_activity[author]['repos'].add(repo_name)
            developer_activity[author]['by_repo'][repo_name]['prs_created'].append(pr)
            developer_activity[author]['total_prs'] += 1

        # Process PR comments
        for comment in pr['comments']['nodes']:
            commenter = comment['author']['login'] if comment['author'] else 'ghost'
            if not filter_devs or commenter in filter_devs:
                repo_name = pr['repository']['nameWithOwner']
                comment_data = {'pr': pr, 'comment': comment}
                developer_activity[commenter]['prs_commented'].append(comment_data)
                developer_activity[commenter]['repos'].add(repo_name)
                developer_activity[commenter]['by_repo'][repo_name]['prs_commented'].append(comment_data)
                developer_activity[commenter]['total_comments'] += 1

        # Process PR reviews
        for review in pr['reviews']['nodes']:
            reviewer = review['author']['login'] if review['author'] else 'ghost'
            if not filter_devs or reviewer in filter_devs:
                repo_name = pr['repository']['nameWithOwner']
                review_data = {'pr': pr, 'review': review}
                developer_activity[reviewer]['prs_reviewed'].append(review_data)
                developer_activity[reviewer]['repos'].add(repo_name)
                developer_activity[reviewer]['by_repo'][repo_name]['prs_reviewed'].append(review_data)
                developer_activity[reviewer]['total_reviews'] += 1

    # Convert sets to lists and defaultdicts to dicts for JSON serialization
    for dev in developer_activity:
        developer_activity[dev]['repos'] = sorted(list(developer_activity[dev]['repos']))
        developer_activity[dev]['by_repo'] = dict(developer_activity[dev]['by_repo'])

    # Filter out developers not in the filter list
    if filter_devs:
        developer_activity = {k: v for k, v in developer_activity.items() if k in filter_devs}

    return dict(developer_activity)


def aggregate_odoo_tickets_by_user(tickets: List[Dict], users_map: Dict[int, str],
                                    partners_map: Dict[int, str], stages_map: Dict[int, Dict],
                                    filter_users: Set[str] = None) -> Dict:
    """
    Aggregate Odoo helpdesk tickets by user.

    Args:
        tickets: List of ticket dictionaries from Odoo
        users_map: Mapping of user ID to user name
        partners_map: Mapping of partner ID to partner name
        stages_map: Mapping of stage ID to stage info
        filter_users: Set of user names to filter (optional)

    Returns:
        Dictionary of user activity data
    """
    user_activity = defaultdict(lambda: {
        'tickets_created': [],
        'tickets_assigned': [],
        'customers': set(),
        'projects': set(),
        'by_customer': defaultdict(list),
        'by_project': defaultdict(list),
        'total_tickets': 0,
        'total_open': 0,
        'total_closed': 0,
        'by_priority': defaultdict(int)
    })

    for ticket in tickets:
        # Get user info
        user_id = ticket.get('user_id')
        if not user_id:
            continue

        # user_id is typically a tuple (id, name) from Odoo
        if isinstance(user_id, (list, tuple)) and len(user_id) >= 2:
            uid, user_name = user_id[0], user_id[1]
        else:
            uid = user_id
            user_name = users_map.get(uid, f'User {uid}')

        # Filter by user if specified
        if filter_users and user_name not in filter_users:
            continue

        # Get customer info
        partner_id = ticket.get('partner_id')
        if isinstance(partner_id, (list, tuple)) and len(partner_id) >= 2:
            pid, customer_name = partner_id[0], partner_id[1]
        elif partner_id:
            pid = partner_id
            customer_name = partners_map.get(pid, f'Customer {pid}')
        else:
            customer_name = 'No Customer'

        # Get project info
        project_id = ticket.get('project_id')
        if isinstance(project_id, (list, tuple)) and len(project_id) >= 2:
            project_name = project_id[1]
        elif project_id:
            project_name = f'Project {project_id}'
        else:
            project_name = 'No Project'

        # Get stage info
        stage_id = ticket.get('stage_id')
        if isinstance(stage_id, (list, tuple)) and len(stage_id) >= 2:
            sid, stage_name = stage_id[0], stage_id[1]
        else:
            sid = stage_id
            stage_name = 'Unknown'

        stage_info = stages_map.get(sid, {'name': stage_name, 'is_closed': False})
        is_closed = stage_info.get('is_closed', False) or ticket.get('close_date')

        # Enrich ticket data
        enriched_ticket = {
            **ticket,
            'user_name': user_name,
            'customer_name': customer_name,
            'project_name': project_name,
            'stage_name': stage_info.get('name', stage_name),
            'is_closed': is_closed
        }

        # Aggregate data
        user_activity[user_name]['tickets_assigned'].append(enriched_ticket)
        user_activity[user_name]['customers'].add(customer_name)
        user_activity[user_name]['projects'].add(project_name)
        user_activity[user_name]['by_customer'][customer_name].append(enriched_ticket)
        user_activity[user_name]['by_project'][project_name].append(enriched_ticket)
        user_activity[user_name]['total_tickets'] += 1

        if is_closed:
            user_activity[user_name]['total_closed'] += 1
        else:
            user_activity[user_name]['total_open'] += 1

        # Priority stats
        priority = ticket.get('priority', '0')
        user_activity[user_name]['by_priority'][priority] += 1

    # Convert sets to sorted lists
    for user in user_activity:
        user_activity[user]['customers'] = sorted(list(user_activity[user]['customers']))
        user_activity[user]['projects'] = sorted(list(user_activity[user]['projects']))
        user_activity[user]['by_customer'] = dict(user_activity[user]['by_customer'])
        user_activity[user]['by_project'] = dict(user_activity[user]['by_project'])
        user_activity[user]['by_priority'] = dict(user_activity[user]['by_priority'])

    return dict(user_activity)


def determine_ticket_next_action(ticket: Dict) -> tuple:
    """
    Determine the next action needed for an Odoo helpdesk ticket.

    Args:
        ticket: Enriched ticket dictionary

    Returns:
        Tuple of (action_text, action_type) for color coding
        action_type: 'awaiting', 'ready', 'completed', 'urgent'
    """
    is_closed = ticket.get('is_closed', False)
    priority = ticket.get('priority', '0')

    if is_closed:
        return ('✅ Closed', 'completed')

    # Check priority (Odoo priorities: 0=Low, 1=Medium, 2=High, 3=Urgent)
    if priority in ['2', '3']:
        return ('🔥 High Priority - Action Required', 'urgent')

    stage_name = ticket.get('stage_name', '').lower()

    if 'wait' in stage_name or 'pending' in stage_name:
        return ('⏳ Awaiting Response', 'awaiting')
    elif 'progress' in stage_name or 'working' in stage_name:
        return ('🔧 In Progress', 'ready')
    elif 'new' in stage_name or 'triage' in stage_name:
        return ('📋 Awaiting Triage', 'awaiting')
    else:
        return ('📌 Open', 'awaiting')


def determine_next_action(item: Dict, item_type: str, current_dev: str) -> tuple:
    """
    Determine the next action needed for an issue, PR, or comment.
    Returns (action_text, action_type) where action_type is used for color coding.

    action_type: 'awaiting', 'ready', 'completed', 'info'
    """

    if item_type == 'issue':
        issue = item
        author = issue['author']['login'] if issue['author'] else 'ghost'

        if issue['state'] == 'CLOSED':
            return ('✅ Completed', 'completed')

        # OPEN issue
        comments = issue.get('comments', {}).get('nodes', [])
        if not comments:
            return ('📋 Awaiting triage', 'awaiting')

        # Check last comment
        last_comment = comments[-1]
        last_commenter = last_comment['author']['login'] if last_comment['author'] else 'ghost'

        if last_commenter == author:
            return ('⏳ Awaiting community response', 'awaiting')
        else:
            return (f'✏️ Awaiting response from @{author}', 'awaiting')

    elif item_type == 'pr':
        pr = item
        author = pr['author']['login'] if pr['author'] else 'ghost'

        if pr['state'] == 'MERGED':
            return ('✅ Merged', 'completed')
        elif pr['state'] == 'CLOSED':
            return ('❌ Closed without merge', 'completed')

        # OPEN PR
        reviews = pr.get('reviews', {}).get('nodes', [])
        if not reviews:
            return ('👀 Awaiting review', 'awaiting')

        # Check latest review
        latest_review = reviews[-1]
        review_state = latest_review.get('state', 'COMMENTED')

        if review_state == 'CHANGES_REQUESTED':
            return (f'🔧 Awaiting changes from @{author}', 'awaiting')
        elif review_state == 'APPROVED':
            return ('✅ Ready to merge', 'ready')
        else:  # COMMENTED or other
            return ('👀 Awaiting review', 'awaiting')

    elif item_type == 'issue_comment':
        parent_issue = item['issue']
        comment = item['comment']
        commenter = comment['author']['login'] if comment['author'] else 'ghost'

        if parent_issue['state'] == 'CLOSED':
            return ('✓ Resolved', 'completed')

        # Check if this is the latest comment
        all_comments = parent_issue.get('comments', {}).get('nodes', [])
        if all_comments and all_comments[-1].get('url') == comment.get('url'):
            return ('✓ Latest activity', 'info')
        else:
            return ('⏳ Awaiting response', 'awaiting')

    elif item_type == 'pr_comment':
        parent_pr = item['pr']
        comment = item['comment']

        if parent_pr['state'] in ['MERGED', 'CLOSED']:
            return ('✓ Resolved', 'completed')

        # Check if this is the latest comment
        all_comments = parent_pr.get('comments', {}).get('nodes', [])
        if all_comments and all_comments[-1].get('url') == comment.get('url'):
            return ('✓ Latest activity', 'info')
        else:
            return ('⏳ Awaiting response', 'awaiting')

    elif item_type == 'pr_review':
        parent_pr = item['pr']

        if parent_pr['state'] in ['MERGED', 'CLOSED']:
            return ('✓ Resolved', 'completed')
        else:
            return ('⏳ Awaiting merge', 'awaiting')

    return ('', 'info')


def strip_images_from_text(text: str) -> str:
    """Remove image references from markdown/HTML text."""
    import re

    # Remove markdown images: ![alt](url)
    text = re.sub(r'!\[([^\]]*)\]\([^\)]+\)', '', text)

    # Remove HTML img tags: <img ... />
    text = re.sub(r'<img[^>]*>', '', text)

    # Remove extra whitespace/newlines left behind
    text = re.sub(r'\n\s*\n', '\n', text)
    text = text.strip()

    return text


def get_first_n_words(text: str, n: int = 10) -> str:
    """Extract first N words from text, removing images and markdown formatting."""
    import re

    if not text:
        return ""

    # Remove images first
    text = strip_images_from_text(text)

    # Remove markdown code blocks
    text = re.sub(r'```[^`]*```', '', text)
    text = re.sub(r'`[^`]*`', '', text)

    # Remove markdown links but keep the text: [text](url) -> text
    text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)

    # Remove markdown formatting: **bold**, *italic*, __bold__, _italic_
    text = re.sub(r'[*_]{1,2}([^*_]+)[*_]{1,2}', r'\1', text)

    # Remove HTML tags
    text = re.sub(r'<[^>]+>', '', text)

    # Remove extra whitespace and newlines
    text = re.sub(r'\s+', ' ', text)
    text = text.strip()

    # Split into words and take first N
    words = text.split()[:n]

    if not words:
        return ""

    result = ' '.join(words)

    # Add ellipsis if there are more words
    if len(text.split()) > n:
        result += '...'

    return result


def generate_html_report(developer_activity: Dict, report_date: str, since_date: str, end_date: str, period_label: str, orgs: List[str], refresh_rate_ms: int = None, odoo_user_activity: Dict = None) -> str:
    """Generate a self-contained HTML report."""

    # Template reader function
    def read_template(filename):
        """Read template file, return empty string if not found."""
        try:
            from pathlib import Path
            template_dir = Path(__file__).parent / 'templates'
            return (template_dir / filename).read_text()
        except:
            return ""

    # Load speech query templates
    speech_css = read_template('speech.css')
    speech_button = read_template('speech_button.html')
    speech_modal = read_template('speech_modal.html')
    speech_js = read_template('speech.js')

    # Calculate GitHub summary statistics
    total_devs = len(developer_activity)
    total_issues = sum(dev['total_issues'] for dev in developer_activity.values())
    total_prs = sum(dev['total_prs'] for dev in developer_activity.values())
    total_comments = sum(dev['total_comments'] for dev in developer_activity.values())
    total_reviews = sum(dev['total_reviews'] for dev in developer_activity.values())

    # Calculate Odoo summary statistics
    odoo_total_users = len(odoo_user_activity) if odoo_user_activity else 0
    odoo_total_tickets = sum(user['total_tickets'] for user in odoo_user_activity.values()) if odoo_user_activity else 0
    odoo_total_open = sum(user['total_open'] for user in odoo_user_activity.values()) if odoo_user_activity else 0
    odoo_total_closed = sum(user['total_closed'] for user in odoo_user_activity.values()) if odoo_user_activity else 0

    orgs_display = ', '.join(orgs)
    orgs_links = ', '.join([f'<a href="https://github.com/{org}" target="_blank" style="color: white; text-decoration: underline;">{org}</a>' for org in orgs])

    html = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Engineering Activity Report - {report_date}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}

        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #f5f5f5;
        }}

        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem 1rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
            transition: padding 0.3s ease;
        }}

        .header.minimized {{
            padding: 0.5rem 1rem;
        }}

        .header.minimized .header-top {{
            display: none;
        }}

        .header.minimized .header-controls {{
            justify-content: space-between;
            width: 100%;
        }}

        .header.minimized .filter-toggle {{
            display: none;
        }}

        .header.minimized .minimized-nav-links {{
            display: flex !important;
        }}

        .header.minimized h1 {{
            font-size: 1.2rem;
            margin: 0;
        }}

        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
        }}

        .header-content {{
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }}

        .header-top {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 2rem;
        }}

        .header-text {{
            flex: 1;
        }}

        .header-controls {{
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            align-items: center;
            justify-content: flex-end;
        }}

        .minimized-title {{
            display: none;
            font-size: 1.2rem;
            font-weight: bold;
            margin: 0;
        }}

        .header.minimized .minimized-title {{
            display: block;
        }}

        .minimized-nav-links {{
            display: none;
            flex-wrap: wrap;
            gap: 0.5rem;
            flex: 1;
            justify-content: flex-end;
        }}

        .minimized-nav-links .nav-link {{
            padding: 0.3rem 0.6rem;
            font-size: 0.75rem;
        }}

        .header h1 {{
            font-size: 1.75rem;
            margin-bottom: 0.25rem;
        }}

        .header .meta {{
            opacity: 0.9;
            font-size: 0.85rem;
        }}

        .nav-links {{
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            align-items: center;
        }}

        .nav-link {{
            display: inline-block;
            padding: 0.4rem 0.9rem;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            text-decoration: none;
            border-radius: 5px;
            font-size: 0.85rem;
            transition: background 0.2s;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }}

        .nav-link:hover {{
            background: rgba(255, 255, 255, 0.3);
        }}

        .filter-toggle {{
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 5px;
            border: 1px solid rgba(255, 255, 255, 0.3);
            font-size: 0.85rem;
        }}

        .toggle-switch {{
            position: relative;
            width: 50px;
            height: 24px;
        }}

        .toggle-switch input {{
            opacity: 0;
            width: 0;
            height: 0;
        }}

        .slider {{
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: 0.3s;
            border-radius: 24px;
        }}

        .slider:before {{
            position: absolute;
            content: "";
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background-color: white;
            transition: 0.3s;
            border-radius: 50%;
        }}

        input:checked + .slider {{
            background-color: #28a745;
        }}

        input:checked + .slider:before {{
            transform: translateX(26px);
        }}

        .activity-card.closed-item {{
            display: none;
        }}

        .section.empty-section {{
            display: none;
        }}

        .developer.empty-developer {{
            display: none;
        }}

        /* Live update animations */
        .activity-card.updating {{
            animation: cardPulse 0.5s ease-in-out;
        }}

        @keyframes cardPulse {{
            0%, 100% {{
                background: white;
            }}
            50% {{
                background: #f0f8ff;
            }}
        }}

        .summary {{
            background: white;
            padding: 2rem;
            margin: 1rem 0;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }}

        .summary h2 {{
            color: #667eea;
            margin-bottom: 1.5rem;
        }}

        .summary-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }}

        .stat-card {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            text-decoration: none;
            display: block;
            transition: transform 0.2s, box-shadow 0.2s;
            cursor: pointer;
        }}

        .stat-card:hover {{
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }}

        .stat-card .number {{
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 0.3rem;
        }}

        .stat-card .label {{
            font-size: 0.8rem;
            opacity: 0.9;
        }}

        .developer {{
            background: white;
            padding: 2rem;
            margin: 1.5rem 0;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }}

        .developer h2 {{
            color: #667eea;
            margin-bottom: 1rem;
            font-size: 1.8rem;
        }}

        .developer-header {{
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }}

        .developer-header h2 {{
            margin: 0;
            flex-shrink: 0;
            font-size: 1.1rem;
            min-width: 120px;
        }}

        .developer-header .developer-stats {{
            display: flex;
            gap: 0.5rem;
            flex: 1;
            margin: 0;
            min-width: 0;
        }}

        .developer-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin: 1.5rem 0;
        }}

        .mini-stat {{
            background: #f8f9fa;
            padding: 0.4rem 0.6rem;
            border-radius: 5px;
            text-align: center;
            border-left: 4px solid #667eea;
            min-width: 0;
        }}

        .mini-stat .num {{
            font-size: 0.95rem;
            font-weight: bold;
            color: #667eea;
        }}

        .mini-stat .lbl {{
            font-size: 0.65rem;
            color: #666;
            margin-top: 0.15rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }}

        .repos {{
            margin: 1.5rem 0;
        }}

        .repos h3 {{
            color: #555;
            margin-bottom: 0.75rem;
            font-size: 1.1rem;
        }}

        .repo-badges {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 0.75rem;
        }}

        .repo-badge {{
            display: block;
            padding: 0.75rem 1rem;
            background: white;
            color: #495057;
            border-radius: 8px;
            font-size: 0.9rem;
            font-family: monospace;
            text-decoration: none;
            transition: all 0.2s;
            border: 2px solid #e9ecef;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }}

        .repo-badge:hover {{
            border-color: #667eea;
            box-shadow: 0 3px 8px rgba(102, 126, 234, 0.2);
            transform: translateY(-2px);
        }}

        .repo-badge::before {{
            content: "📁 ";
            margin-right: 0.5rem;
        }}

        .next-action {{
            margin-top: 0.75rem;
            padding: 0.5rem 0.75rem;
            border-radius: 5px;
            font-size: 0.85rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }}

        .next-action.awaiting {{
            background: #fff3cd;
            color: #856404;
            border-left: 4px solid #ffc107;
        }}

        .next-action.ready {{
            background: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }}

        .next-action.completed {{
            background: #d1ecf1;
            color: #0c5460;
            border-left: 4px solid #17a2b8;
        }}

        .next-action.info {{
            background: #e7f3ff;
            color: #004085;
            border-left: 4px solid #007bff;
        }}

        .next-action.urgent {{
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }}

        /* Odoo-specific styles */
        .odoo-section {{
            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
        }}

        .activity-type-ticket {{
            background: #ff6b35;
            color: white;
        }}

        .odoo-customer-badge {{
            background: #f7931e;
            color: white;
            padding: 0.3rem 0.7rem;
            border-radius: 4px;
            font-size: 0.8rem;
            display: inline-block;
            margin-right: 0.5rem;
        }}

        .section {{
            margin: 2rem 0;
        }}

        .section h3 {{
            color: #555;
            margin-bottom: 1rem;
            font-size: 1.2rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #667eea;
        }}

        .item {{
            background: white;
            padding: 1rem;
            margin: 0.75rem 0;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.2s, transform 0.2s;
        }}

        .item:hover {{
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
            transform: translateX(2px);
        }}

        .item h4 {{
            color: #333;
            margin-bottom: 0.5rem;
        }}

        .item h4 a {{
            color: #667eea;
            text-decoration: none;
        }}

        .item h4 a:hover {{
            text-decoration: underline;
        }}

        .item-meta {{
            font-size: 0.85rem;
            color: #666;
            margin: 0.5rem 0;
        }}

        .badge {{
            display: inline-block;
            padding: 0.25rem 0.6rem;
            border-radius: 3px;
            font-size: 0.75rem;
            font-weight: bold;
            margin: 0 0.25rem;
        }}

        .badge-open {{
            background: #28a745;
            color: white;
        }}

        .badge-closed {{
            background: #dc3545;
            color: white;
        }}

        .badge-merged {{
            background: #6f42c1;
            color: white;
        }}

        .comment-preview {{
            background: white;
            padding: 0.75rem;
            margin-top: 0.5rem;
            border-radius: 3px;
            font-size: 0.9rem;
            border-left: 3px solid #dee2e6;
        }}

        .section h4 {{
            color: #495057;
            font-size: 1rem;
            margin: 1.5rem 0 0.75rem 0;
            padding-bottom: 0.25rem;
            border-bottom: 1px solid #dee2e6;
        }}

        .section h4:first-child {{
            margin-top: 0;
        }}

        .item h5 {{
            color: #333;
            font-size: 0.95rem;
            margin-bottom: 0.5rem;
        }}

        .item h5 a {{
            color: #667eea;
            text-decoration: none;
        }}

        .item h5 a:hover {{
            text-decoration: underline;
        }}

        .repo-activities {{
            margin-top: 1rem;
        }}

        .cards-grid {{
            display: grid;
            grid-template-columns: repeat(3, minmax(0, 1fr));
            gap: 1rem;
            margin-top: 1rem;
            grid-auto-flow: row;
        }}

        .activity-card {{
            background: white;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            transition: box-shadow 0.2s, transform 0.2s;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            min-width: 0;
            overflow: hidden;
        }}

        .activity-card:hover {{
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15);
            transform: translateY(-2px);
        }}

        .activity-type-badge {{
            display: inline-block;
            padding: 0.25rem 0.6rem;
            border-radius: 3px;
            font-size: 0.75rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
            width: fit-content;
        }}

        .activity-type-issue {{
            background: #28a745;
            color: white;
        }}

        .activity-type-pr {{
            background: #6f42c1;
            color: white;
        }}

        .activity-type-comment {{
            background: #007bff;
            color: white;
        }}

        .activity-type-review {{
            background: #fd7e14;
            color: white;
        }}

        .activity-card h5 {{
            color: #333;
            font-size: 0.95rem;
            margin: 0;
            line-height: 1.4;
            overflow: hidden;
            word-break: break-word;
        }}

        .activity-card h5 a {{
            color: #667eea;
            text-decoration: none;
        }}

        .activity-card h5 a:hover {{
            text-decoration: underline;
        }}

        .activity-card .item-meta {{
            font-size: 0.85rem;
            color: #666;
            margin: 0.25rem 0;
        }}

        .activity-card .comment-preview {{
            background: #f8f9fa;
            padding: 0.5rem;
            margin: 0.5rem 0;
            border-radius: 3px;
            font-size: 0.85rem;
            border-left: 3px solid #dee2e6;
            flex-grow: 1;
        }}

        .text-preview {{
            background: #f8f9fa;
            padding: 0.5rem;
            margin: 0.5rem 0 0 0;
            border-radius: 3px;
            font-size: 0.8rem;
            color: #666;
            font-style: italic;
            line-height: 1.4;
        }}

        .activity-card .next-action {{
            margin-top: auto;
        }}

        /* Desktop optimizations - multi-column and reduced spacing */
        @media (min-width: 1024px) {{
            .summary {{
                padding: 1.25rem;
            }}

            .summary-grid {{
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }}

            .developer {{
                padding: 1.25rem;
                margin: 1rem 0;
            }}

            .developer-stats {{
                grid-template-columns: repeat(5, 1fr);
            }}

            .section {{
                margin: 1rem 0;
            }}

            .item {{
                padding: 0.75rem;
                margin: 0.5rem 0;
            }}

            .nav {{
                padding: 0.75rem;
            }}

            .repos {{
                margin: 1rem 0;
            }}

            .repo-badges {{
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }}

            .cards-grid {{
                grid-template-columns: repeat(3, 1fr);
            }}
        }}

        @media (min-width: 768px) and (max-width: 1023px) {{
            .cards-grid {{
                grid-template-columns: repeat(2, 1fr);
            }}
        }}

        @media (max-width: 768px) {{
            .header {{
                position: relative;
            }}

            .header-top {{
                flex-direction: column;
                gap: 1rem;
            }}

            .header h1 {{
                font-size: 1.4rem;
            }}

            .nav-links {{
                width: 100%;
                flex-direction: column;
            }}

            .nav-link {{
                text-align: center;
                width: 100%;
            }}

            .header-controls {{
                width: 100%;
                flex-direction: column;
            }}

            .filter-toggle {{
                width: 100%;
                justify-content: center;
            }}

            .summary-grid,
            .developer-stats {{
                grid-template-columns: repeat(2, 1fr);
            }}

            .stat-card .number {{
                font-size: 1.5rem;
            }}

            .repo-badges {{
                grid-template-columns: 1fr;
            }}

            .cards-grid {{
                grid-template-columns: 1fr;
            }}
        }}

        /* Speech Query Interface Templates */
        {speech_css}

        /* Footer styles */
        .footer {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
            margin-top: 2rem;
            text-align: center;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }}

        .footer a {{
            color: white;
            text-decoration: underline;
        }}

        .footer a:hover {{
            opacity: 0.8;
        }}
    </style>
</head>
<body>
    <div class="header" id="mainHeader">
        <div class="container">
            <div class="header-content">
                <div class="header-top">
                    <div class="header-text">
                        <h1><a href="#" onclick="window.location.href = window.location.pathname; return false;" style="color: white; text-decoration: none; cursor: pointer;">Engineering Activity Report</a></h1>
                        <div class="meta">
                            Generated: {report_date} | Period: {period_label} ({since_date} to {end_date})
                        </div>
                        <div class="meta">
                            Organizations: {orgs_links}
                        </div>
                    </div>
                    <div class="nav-links">
'''

    # Add developer navigation links
    for dev in sorted(developer_activity.keys()):
        html += f'                        <a href="#dev-{dev}" class="nav-link">{dev}</a>\n'

    html += '''                    </div>
                </div>
                <div class="header-controls">
                    <h1 class="minimized-title"><a href="#" onclick="window.scrollTo(0,0); return false;" style="color: white; text-decoration: none; cursor: pointer;">Engineering Activity Report</a></h1>
                    <div class="minimized-nav-links">
'''

    # Add developer navigation links for minimized header
    for dev in sorted(developer_activity.keys()):
        html += f'                        <a href="#dev-{dev}" class="nav-link">{dev}</a>\n'

    # Add Odoo users to minimized header if present
    if odoo_user_activity:
        for user_name in sorted(odoo_user_activity.keys()):
            user_first_name = user_name.split()[0] if ' ' in user_name else user_name
            html += f'                        <a href="#odoo-user-{user_name.replace(" ", "-")}" class="nav-link" style="background: rgba(255, 107, 53, 0.3);">{user_first_name}</a>\n'

    html += '''                    </div>
                    <div class="filter-toggle">
                        <span>Show Closed</span>
                        <label class="toggle-switch">
                            <input type="checkbox" id="showClosedToggle">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    ''' + speech_modal + '''

    <div class="container">

        <div id="summary" class="summary">
            <h2>Summary Statistics</h2>
            <div class="summary-grid">
'''

    # Add summary statistics with links to sections
    html += f'''                <a href="#github-activity" class="stat-card">
                    <div class="number">{total_devs}</div>
                    <div class="label">Active Developers</div>
                </a>
                <a href="#github-activity" class="stat-card">
                    <div class="number">{total_issues}</div>
                    <div class="label">Issues Created</div>
                </a>
                <a href="#github-activity" class="stat-card">
                    <div class="number">{total_prs}</div>
                    <div class="label">PRs Created</div>
                </a>
                <a href="#github-activity" class="stat-card">
                    <div class="number">{total_comments}</div>
                    <div class="label">Comments Posted</div>
                </a>
                <a href="#github-activity" class="stat-card">
                    <div class="number">{total_reviews}</div>
                    <div class="label">PR Reviews</div>
                </a>
'''

    # Add Odoo statistics if present
    if odoo_user_activity:
        html += f'''                <a href="#odoo-helpdesk" class="stat-card odoo-section">
                    <div class="number">{odoo_total_users}</div>
                    <div class="label">Helpdesk Users</div>
                </a>
                <a href="#odoo-helpdesk" class="stat-card odoo-section">
                    <div class="number">{odoo_total_tickets}</div>
                    <div class="label">Total Tickets</div>
                </a>
                <a href="#odoo-helpdesk" class="stat-card odoo-section">
                    <div class="number">{odoo_total_open}</div>
                    <div class="label">Open Tickets</div>
                </a>
                <a href="#odoo-helpdesk" class="stat-card odoo-section">
                    <div class="number">{odoo_total_closed}</div>
                    <div class="label">Closed Tickets</div>
                </a>
'''

    html += '''            </div>
        </div>
'''

    # Add GitHub Activity anchor
    if developer_activity:
        html += '''
        <div id="github-activity" style="margin-top: 2rem;"></div>
'''

    # Generate developer sections
    for dev in sorted(developer_activity.keys()):
        activity = developer_activity[dev]
        html += f'''
        <div id="dev-{dev}" class="developer">
            <div class="developer-header">
                <h2>{dev}</h2>
                <div class="developer-stats">
                    <div class="mini-stat">
                        <div class="num">{activity['total_issues']}</div>
                        <div class="lbl">Issues</div>
                    </div>
                    <div class="mini-stat">
                        <div class="num">{activity['total_prs']}</div>
                        <div class="lbl">PRs</div>
                    </div>
                    <div class="mini-stat">
                        <div class="num">{activity['total_comments']}</div>
                        <div class="lbl">Comments</div>
                    </div>
                    <div class="mini-stat">
                        <div class="num">{activity['total_reviews']}</div>
                        <div class="lbl">Reviews</div>
                    </div>
                    <div class="mini-stat">
                        <div class="num">{len(activity['repos'])}</div>
                        <div class="lbl">Repos</div>
                    </div>
                </div>
            </div>

            <div class="repos">
                <h3>Active Repositories</h3>
                <div class="repo-badges">
'''

        for repo in activity['repos']:
            repo_anchor = repo.replace('/', '-').replace('_', '-')
            html += f'                    <a href="#dev-{dev}-repo-{repo_anchor}" class="repo-badge">{repo}</a>\n'

        html += '''                </div>
            </div>
'''

        # Activity organized by repository
        for repo in activity['repos']:
            repo_anchor = repo.replace('/', '-').replace('_', '-')
            repo_data = activity['by_repo'][repo]

            # Consolidate activities by issue/PR number
            items_map = {}  # key: (type, number), value: item data with counts

            # Add issues created
            for issue in repo_data['issues_created']:
                key = ('issue', issue['number'])
                if key not in items_map:
                    items_map[key] = {
                        'type': 'issue',
                        'date': issue['updatedAt'],
                        'data': issue,
                        'dev_comment_count': 0,
                        'latest_dev_comment': None
                    }

            # Add PRs created
            for pr in repo_data['prs_created']:
                key = ('pr', pr['number'])
                if key not in items_map:
                    items_map[key] = {
                        'type': 'pr',
                        'date': pr['updatedAt'],
                        'data': pr,
                        'dev_comment_count': 0,
                        'dev_review_count': 0,
                        'latest_dev_comment': None
                    }

            # Count issue comments by developer
            for item in repo_data['issues_commented']:
                issue = item['issue']
                comment = item['comment']
                key = ('issue', issue['number'])
                if key not in items_map:
                    items_map[key] = {
                        'type': 'issue',
                        'date': issue['updatedAt'],
                        'data': issue,
                        'dev_comment_count': 0,
                        'latest_dev_comment': None
                    }
                items_map[key]['dev_comment_count'] += 1
                # Track the most recent comment by this developer
                if (items_map[key]['latest_dev_comment'] is None or
                    comment.get('updatedAt', '') > items_map[key]['latest_dev_comment'].get('updatedAt', '')):
                    items_map[key]['latest_dev_comment'] = comment

            # Count PR comments by developer
            for item in repo_data['prs_commented']:
                pr = item['pr']
                comment = item['comment']
                key = ('pr', pr['number'])
                if key not in items_map:
                    items_map[key] = {
                        'type': 'pr',
                        'date': pr['updatedAt'],
                        'data': pr,
                        'dev_comment_count': 0,
                        'dev_review_count': 0,
                        'latest_dev_comment': None
                    }
                items_map[key]['dev_comment_count'] += 1
                # Track the most recent comment by this developer
                if (items_map[key]['latest_dev_comment'] is None or
                    comment.get('updatedAt', '') > items_map[key]['latest_dev_comment'].get('updatedAt', '')):
                    items_map[key]['latest_dev_comment'] = comment

            # Count PR reviews by developer
            for item in repo_data['prs_reviewed']:
                pr = item['pr']
                key = ('pr', pr['number'])
                if key not in items_map:
                    items_map[key] = {
                        'type': 'pr',
                        'date': pr['updatedAt'],
                        'data': pr,
                        'dev_comment_count': 0,
                        'dev_review_count': 0
                    }
                items_map[key]['dev_review_count'] += 1

            # Convert to list and sort by date
            all_activities = list(items_map.values())

            # Skip if no activity
            if not all_activities:
                continue

            # Sort by date (most recent first)
            all_activities.sort(key=lambda x: x['date'], reverse=True)

            html += f'''
            <div id="dev-{dev}-repo-{repo_anchor}" class="section">
                <h3>{repo}</h3>
                <div class="repo-activities">
                    <div class="cards-grid">
'''

            # Generate cards for all activities
            for activity_item in all_activities:
                activity_type = activity_item['type']
                data = activity_item['data']
                dev_comment_count = activity_item.get('dev_comment_count', 0)

                if activity_type == 'issue':
                    issue = data
                    latest_comment = activity_item.get('latest_dev_comment')
                    state_badge = 'badge-open' if issue['state'] == 'OPEN' else 'badge-closed'
                    next_action, action_type = determine_next_action(issue, 'issue', dev)

                    # Build activity status with comment count
                    activity_parts = [next_action]
                    if dev_comment_count > 0:
                        activity_parts.append(f"💬 {dev_comment_count} comment{'s' if dev_comment_count != 1 else ''}")
                    activity_status = " | ".join(activity_parts)

                    # Convert date to DD.MM.YY format
                    from datetime import datetime
                    updated_date = datetime.strptime(issue['updatedAt'][:10], '%Y-%m-%d').strftime('%d.%m.%y')

                    # Get text preview: prefer latest comment, fallback to issue body
                    preview_text = ""
                    if latest_comment and latest_comment.get('body'):
                        preview_text = get_first_n_words(latest_comment['body'], 10)
                    elif issue.get('body'):
                        preview_text = get_first_n_words(issue['body'], 10)

                    html += f'''                        <div class="activity-card" data-state="{issue['state']}" data-action-type="{action_type}" data-type="issue" data-repo="{repo}" data-number="{issue['number']}" data-total-comments="{issue['comments']['totalCount']}">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                <div>
                                    <span class="activity-type-badge activity-type-issue" style="margin-right: 0.5rem; margin-bottom: 0;">ISSUE</span>
                                    <span class="badge {state_badge}">{issue['state']}</span>
                                </div>
                                <span class="item-meta" style="margin: 0;">Updated: {updated_date}</span>
                            </div>
                            <h5><a href="{issue['url']}" target="_blank">#{issue['number']} {issue['title']}</a></h5>'''
                    if preview_text:
                        html += f'''
                            <div class="text-preview">{preview_text}</div>'''
                    html += f'''
                            <div class="next-action {action_type}">{activity_status}</div>
                        </div>
'''

                elif activity_type == 'pr':
                    pr = data
                    latest_comment = activity_item.get('latest_dev_comment')
                    dev_review_count = activity_item.get('dev_review_count', 0)

                    if pr['state'] == 'MERGED':
                        state_badge = 'badge-merged'
                        state_text = 'MERGED'
                    elif pr['state'] == 'OPEN':
                        state_badge = 'badge-open'
                        state_text = 'OPEN'
                    else:
                        state_badge = 'badge-closed'
                        state_text = 'CLOSED'

                    next_action, action_type = determine_next_action(pr, 'pr', dev)

                    # Build activity status with comment and review counts
                    activity_parts = [next_action]
                    if dev_comment_count > 0:
                        activity_parts.append(f"💬 {dev_comment_count} comment{'s' if dev_comment_count != 1 else ''}")
                    if dev_review_count > 0:
                        activity_parts.append(f"👁️ {dev_review_count} review{'s' if dev_review_count != 1 else ''}")
                    activity_status = " | ".join(activity_parts)

                    # Convert dates to DD.MM.YY format
                    from datetime import datetime
                    updated_date = datetime.strptime(pr['updatedAt'][:10], '%Y-%m-%d').strftime('%d.%m.%y')
                    merged_date = datetime.strptime(pr['mergedAt'][:10], '%Y-%m-%d').strftime('%d.%m.%y') if pr.get('mergedAt') else None

                    # Get text preview: prefer latest comment, fallback to PR body
                    preview_text = ""
                    if latest_comment and latest_comment.get('body'):
                        preview_text = get_first_n_words(latest_comment['body'], 10)
                    elif pr.get('body'):
                        preview_text = get_first_n_words(pr['body'], 10)

                    html += f'''                        <div class="activity-card" data-state="{pr['state']}" data-action-type="{action_type}" data-type="pr" data-repo="{repo}" data-number="{pr['number']}" data-total-comments="{pr['comments']['totalCount']}" data-total-reviews="{pr['reviews']['totalCount']}">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                <div>
                                    <span class="activity-type-badge activity-type-pr" style="margin-right: 0.5rem; margin-bottom: 0;">PULL REQUEST</span>
                                    <span class="badge {state_badge}">{state_text}</span>
                                </div>
                                <span class="item-meta" style="margin: 0;">Updated: {updated_date}</span>
                            </div>
                            <h5><a href="{pr['url']}" target="_blank">#{pr['number']} {pr['title']}</a></h5>'''
                    if merged_date:
                        html += f'''
                            <div class="item-meta" style="margin: 0.25rem 0;">Merged: {merged_date}</div>'''
                    if preview_text:
                        html += f'''
                            <div class="text-preview">{preview_text}</div>'''
                    html += f'''
                            <div class="next-action {action_type}">{activity_status}</div>
                        </div>
'''

            html += '''                    </div>
                </div>
            </div>
'''

        html += '        </div>\n'

    # Generate Odoo Helpdesk sections if data is available
    if odoo_user_activity:
        html += '''
        <div id="odoo-helpdesk" class="summary" style="margin-top: 3rem; border-top: 3px solid #ff6b35;">
            <h2 style="color: #ff6b35;">Odoo Helpdesk Activity</h2>
        </div>
'''

        for user_name in sorted(odoo_user_activity.keys()):
            user_data = odoo_user_activity[user_name]
            html += f'''
        <div id="odoo-user-{user_name.replace(' ', '-')}" class="developer">
            <div class="developer-header">
                <h2 style="color: #ff6b35;">{user_name}</h2>
                <div class="developer-stats">
                    <div class="mini-stat" style="border-left-color: #ff6b35;">
                        <div class="num" style="color: #ff6b35;">{user_data['total_tickets']}</div>
                        <div class="lbl">Tickets</div>
                    </div>
                    <div class="mini-stat" style="border-left-color: #28a745;">
                        <div class="num" style="color: #28a745;">{user_data['total_open']}</div>
                        <div class="lbl">Open</div>
                    </div>
                    <div class="mini-stat" style="border-left-color: #17a2b8;">
                        <div class="num" style="color: #17a2b8;">{user_data['total_closed']}</div>
                        <div class="lbl">Closed</div>
                    </div>
                    <div class="mini-stat" style="border-left-color: #dc3545;">
                        <div class="num" style="color: #dc3545;">{user_data['by_priority'].get('2', 0) + user_data['by_priority'].get('3', 0)}</div>
                        <div class="lbl">High Pri</div>
                    </div>
                    <div class="mini-stat" style="border-left-color: #f7931e;">
                        <div class="num" style="color: #f7931e;">{len(user_data['customers'])}</div>
                        <div class="lbl">Customers</div>
                    </div>
                </div>
            </div>

            <div class="repos">
                <h3>Customers & Projects</h3>
                <div class="repo-badges">
'''

            # Add customer and project badges
            for customer in user_data['customers']:
                customer_anchor = customer.replace(' ', '-').replace('/', '-')
                html += f'                    <a href="#odoo-user-{user_name.replace(" ", "-")}-customer-{customer_anchor}" class="repo-badge" style="border-color: #f7931e;">{customer}</a>\n'

            html += '''                </div>
            </div>
'''

            # Organize tickets by customer
            for customer in sorted(user_data['by_customer'].keys()):
                customer_anchor = customer.replace(' ', '-').replace('/', '-')
                customer_tickets = user_data['by_customer'][customer]

                if not customer_tickets:
                    continue

                # Sort tickets by write_date (most recent first)
                customer_tickets.sort(key=lambda t: t.get('write_date', ''), reverse=True)

                html += f'''
            <div id="odoo-user-{user_name.replace(" ", "-")}-customer-{customer_anchor}" class="section">
                <h3 style="border-bottom-color: #ff6b35;">{customer}</h3>
                <div class="repo-activities">
                    <div class="cards-grid">
'''

                # Generate ticket cards
                for ticket in customer_tickets:
                    ticket_id = ticket.get('id', 0)
                    ticket_name = ticket.get('name', 'Untitled Ticket')
                    project_name = ticket.get('project_name', 'No Project')
                    stage_name = ticket.get('stage_name', 'Unknown')
                    priority = ticket.get('priority', '0')
                    is_closed = ticket.get('is_closed', False)

                    # Priority labels
                    priority_labels = {
                        '0': 'Low',
                        '1': 'Medium',
                        '2': 'High',
                        '3': 'Urgent'
                    }
                    priority_label = priority_labels.get(str(priority), 'Low')

                    # Determine next action
                    next_action, action_type = determine_ticket_next_action(ticket)

                    # Format dates
                    write_date = ticket.get('write_date', '')
                    create_date = ticket.get('create_date', '')

                    from datetime import datetime
                    if write_date:
                        write_date_formatted = datetime.strptime(write_date[:10], '%Y-%m-%d').strftime('%d.%m.%y')
                    else:
                        write_date_formatted = 'N/A'

                    if create_date:
                        create_date_formatted = datetime.strptime(create_date[:10], '%Y-%m-%d').strftime('%d.%m.%y')
                    else:
                        create_date_formatted = 'N/A'

                    # State badge
                    state_badge = 'badge-closed' if is_closed else 'badge-open'
                    state_text = 'CLOSED' if is_closed else 'OPEN'

                    # Get ticket description preview
                    description = ticket.get('description', '')
                    if description and description not in [False, None]:
                        description_preview = get_first_n_words(description, 10)
                    else:
                        description_preview = ""

                    html += f'''                        <div class="activity-card" data-state="{state_text}" data-action-type="{action_type}" data-type="ticket" data-customer="{customer}">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                                <div>
                                    <span class="activity-type-badge activity-type-ticket" style="margin-right: 0.5rem; margin-bottom: 0;">TICKET</span>
                                    <span class="badge {state_badge}">{state_text}</span>
                                </div>
                                <span class="item-meta" style="margin: 0;">Updated: {write_date_formatted}</span>
                            </div>
                            <h5>#{ticket_id} {ticket_name}</h5>
                            <div class="item-meta" style="margin: 0.25rem 0;">
                                <span class="odoo-customer-badge">{customer}</span>
                                <span style="color: #666; font-size: 0.85rem;">Project: {project_name}</span>
                            </div>
                            <div class="item-meta" style="margin: 0.25rem 0;">
                                Stage: {stage_name} | Priority: {priority_label} | Created: {create_date_formatted}
                            </div>'''
                    if description_preview:
                        html += f'''
                            <div class="text-preview">{description_preview}</div>'''
                    html += f'''
                            <div class="next-action {action_type}">{next_action}</div>
                        </div>
'''

                html += '''                    </div>
                </div>
            </div>
'''

            html += '        </div>\n'

    html += '''    </div>

    <script>
    // Injected refresh rate from command-line argument (in milliseconds)
    const REFRESH_RATE_MS = ''' + (str(refresh_rate_ms) if refresh_rate_ms else 'null') + ''';

    document.addEventListener('DOMContentLoaded', function() {
        const showClosedToggle = document.getElementById('showClosedToggle');
        const mainHeader = document.getElementById('mainHeader');
        const cards = document.querySelectorAll('.activity-card');

        let updateInterval = null;
        let lastUpdateTime = null;
        let rateLimitRemaining = 5000;
        let rateLimitReset = null;

        // Header scroll behavior
        let lastScrollTop = 0;
        window.addEventListener('scroll', function() {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

            if (scrollTop > 100) {
                mainHeader.classList.add('minimized');
            } else {
                mainHeader.classList.remove('minimized');
            }

            lastScrollTop = scrollTop;
        });

        // Show/hide closed items
        function updateCardVisibility() {
            const showClosed = showClosedToggle.checked;

            // Step 1: Hide/show activity cards based on closed state
            cards.forEach(card => {
                const state = card.getAttribute('data-state');
                const actionType = card.getAttribute('data-action-type');

                if (!showClosed && (state === 'CLOSED' || state === 'MERGED' || actionType === 'completed')) {
                    card.classList.add('closed-item');
                } else {
                    card.classList.remove('closed-item');
                }
            });

            // Step 2: Hide repo sections that have no visible cards
            const repoSections = document.querySelectorAll('.section');
            repoSections.forEach(section => {
                const sectionCards = section.querySelectorAll('.activity-card');
                const hasVisibleCards = Array.from(sectionCards).some(card =>
                    !card.classList.contains('closed-item')
                );

                if (hasVisibleCards) {
                    section.classList.remove('empty-section');
                } else {
                    section.classList.add('empty-section');
                }
            });

            // Step 3: Hide developer sections that have no visible repo sections
            const developerSections = document.querySelectorAll('.developer');
            developerSections.forEach(devSection => {
                const devRepoSections = devSection.querySelectorAll('.section');
                const hasVisibleSections = Array.from(devRepoSections).some(section =>
                    !section.classList.contains('empty-section')
                );

                if (hasVisibleSections) {
                    devSection.classList.remove('empty-developer');
                } else {
                    devSection.classList.add('empty-developer');
                }
            });
        }

        // Initialize: hide closed by default
        updateCardVisibility();
        showClosedToggle.addEventListener('change', updateCardVisibility);

        // Realtime updates logic
        function updateLiveStatus(text, icon = 'ℹ️') {
            // Status display elements removed - log to console instead
            console.log(`[Live Updates] ${icon} ${text}`);
        }

        async function fetchGitHubData(repo, number, type) {
            const [owner, repoName] = repo.split('/');
            const endpoint = type === 'issue'
                ? `https://api.github.com/repos/${owner}/${repoName}/issues/${number}`
                : `https://api.github.com/repos/${owner}/${repoName}/pulls/${number}`;

            try {
                const response = await fetch(endpoint, {
                    headers: {
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });

                // Update rate limit info
                rateLimitRemaining = parseInt(response.headers.get('X-RateLimit-Remaining')) || rateLimitRemaining;
                rateLimitReset = response.headers.get('X-RateLimit-Reset');

                if (!response.ok) {
                    console.error(`Failed to fetch ${type} #${number}:`, response.status);
                    return null;
                }

                return await response.json();
            } catch (error) {
                console.error(`Error fetching ${type} #${number}:`, error);
                return null;
            }
        }

        async function updateAllCards() {
            if (rateLimitRemaining < 10) {
                updateLiveStatus('Rate limit low - pausing updates', '⚠️');
                stopLiveUpdates();
                return;
            }

            updateLiveStatus('Updating...', '🔄');
            let updatedCount = 0;

            for (const card of cards) {
                const type = card.getAttribute('data-type');
                const repo = card.getAttribute('data-repo');
                const number = card.getAttribute('data-number');
                const currentComments = parseInt(card.getAttribute('data-total-comments'));

                const data = await fetchGitHubData(repo, number, type);

                if (data) {
                    const newComments = data.comments || 0;
                    const newState = data.state.toUpperCase();

                    // Update comment count if changed
                    if (newComments !== currentComments) {
                        card.setAttribute('data-total-comments', newComments);
                        card.classList.add('updating');

                        // Find and update the comment count in the next-action div
                        const nextAction = card.querySelector('.next-action');
                        if (nextAction) {
                            const commentMatch = nextAction.textContent.match(/💬 (\\d+) comment/);
                            if (commentMatch) {
                                nextAction.innerHTML = nextAction.innerHTML.replace(
                                    /💬 \\d+ comment(s)?/,
                                    `💬 ${newComments} comment${newComments !== 1 ? 's' : ''}`
                                );
                            }
                        }

                        setTimeout(() => card.classList.remove('updating'), 500);
                        updatedCount++;
                    }

                    // Update state if changed
                    if (newState !== card.getAttribute('data-state')) {
                        card.setAttribute('data-state', newState);
                        const badge = card.querySelector('.badge');
                        if (badge) {
                            badge.textContent = newState;
                            badge.className = 'badge badge-' + (newState === 'MERGED' ? 'merged' : newState === 'OPEN' ? 'open' : 'closed');
                        }
                        updatedCount++;
                    }
                }

                // Small delay to avoid hitting rate limits too fast
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            lastUpdateTime = new Date();
            const timeStr = lastUpdateTime.toLocaleTimeString();
            updateLiveStatus(`Last update: ${timeStr} | Rate limit: ${rateLimitRemaining}`, '✓');

            if (updatedCount > 0) {
                console.log(`Updated ${updatedCount} card(s) at ${timeStr}`);
            }
        }

        function startLiveUpdates() {
            // Use injected REFRESH_RATE_MS instead of UI selector
            if (!REFRESH_RATE_MS) {
                console.warn('No refresh rate configured');
                return;
            }

            // Clear existing interval
            if (updateInterval) {
                clearInterval(updateInterval);
            }

            updateLiveStatus('Starting live updates...', '🔄');

            // Initial update
            updateAllCards();

            // Set up periodic updates using injected refresh rate
            updateInterval = setInterval(updateAllCards, REFRESH_RATE_MS);
        }

        function stopLiveUpdates() {
            if (updateInterval) {
                clearInterval(updateInterval);
                updateInterval = null;
            }
            updateLiveStatus('Live updates stopped', '⏸️');
        }

        // Auto-start live updates if refresh rate was configured
        if (REFRESH_RATE_MS) {
            console.log(`Auto-starting live updates with refresh rate: ${REFRESH_RATE_MS}ms`);
            startLiveUpdates();
        }

        // Check rate limit status every minute
        setInterval(function() {
            if (rateLimitReset && rateLimitRemaining < 100) {
                const resetTime = new Date(parseInt(rateLimitReset) * 1000);
                const now = new Date();
                if (resetTime > now) {
                    const minutesUntilReset = Math.ceil((resetTime - now) / 60000);
                    updateLiveStatus(`⚠️ Low rate limit. Resets in ${minutesUntilReset}min`, false);
                }
            }
        }, 60000);

        // Speech Query Interface
        ''' + speech_js + '''
    });
    </script>

    <footer class="footer">''' + speech_button + ''' | © 2025 Ashant Chalasani and Alieh Vo | Licensed under <a href="https://opensource.org/licenses/MIT" target="_blank">MIT License</a></footer>
</body>
</html>
'''

    return html


def calculate_date_range(period: str) -> tuple:
    """
    Calculate date range based on period code.
    Returns (start_date, end_date, period_label)
    """
    now = datetime.now()
    today = now.date()

    if period == '7d':
        start_date = today - timedelta(days=7)
        return (start_date.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), 'Past 7 Days')

    elif period == 'week':
        # This week (Monday to today)
        monday = today - timedelta(days=today.weekday())
        return (monday.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), 'This Week')

    elif period == 'lastweek':
        # Last week (previous Monday to Sunday)
        days_since_monday = today.weekday()
        this_monday = today - timedelta(days=days_since_monday)
        last_sunday = this_monday - timedelta(days=1)
        last_monday = last_sunday - timedelta(days=6)
        return (last_monday.strftime('%Y-%m-%d'), last_sunday.strftime('%Y-%m-%d'), 'Last Week')

    elif period == '14d':
        start_date = today - timedelta(days=14)
        return (start_date.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), 'Past 14 Days')

    elif period == 'month':
        # This month (1st to today)
        start_date = today.replace(day=1)
        return (start_date.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), 'This Month')

    elif period == 'lastmonth':
        # Last month (entire previous month)
        first_of_this_month = today.replace(day=1)
        last_month_end = first_of_this_month - timedelta(days=1)
        last_month_start = last_month_end.replace(day=1)
        return (last_month_start.strftime('%Y-%m-%d'), last_month_end.strftime('%Y-%m-%d'), 'Last Month')

    elif period == 'quarter':
        # This quarter (Q1-Q4 start to today)
        quarter = (now.month - 1) // 3
        quarter_start_month = quarter * 3 + 1
        start_date = today.replace(month=quarter_start_month, day=1)
        quarter_num = quarter + 1
        return (start_date.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), f'This Quarter (Q{quarter_num})')

    elif period == 'year':
        # This year (Jan 1 to today)
        start_date = today.replace(month=1, day=1)
        return (start_date.strftime('%Y-%m-%d'), today.strftime('%Y-%m-%d'), 'This Year')

    else:
        # Default to last week
        days_since_monday = today.weekday()
        this_monday = today - timedelta(days=days_since_monday)
        last_sunday = this_monday - timedelta(days=1)
        last_monday = last_sunday - timedelta(days=6)
        return (last_monday.strftime('%Y-%m-%d'), last_sunday.strftime('%Y-%m-%d'), 'Last Week')


def prompt_period_selection() -> str:
    """Interactive menu to select time period."""
    print("\nSelect time period:", file=sys.stderr)
    print("  1. Last Week", file=sys.stderr)
    print("  2. This Week", file=sys.stderr)
    print("  3. Past 7 Days", file=sys.stderr)
    print("  4. Past 14 Days", file=sys.stderr)
    print("  5. This Month", file=sys.stderr)
    print("  6. Last Month", file=sys.stderr)
    print("  7. This Quarter", file=sys.stderr)
    print("  8. This Year", file=sys.stderr)

    period_map = {
        '1': 'lastweek',
        '2': 'week',
        '3': '7d',
        '4': '14d',
        '5': 'month',
        '6': 'lastmonth',
        '7': 'quarter',
        '8': 'year'
    }

    while True:
        try:
            choice = input("Enter choice [1-8] (default: 1): ").strip()
            if not choice:
                return 'lastweek'
            if choice in period_map:
                return period_map[choice]
            print("Invalid choice. Please enter 1-8.", file=sys.stderr)
        except (EOFError, KeyboardInterrupt):
            print("\nUsing default: Last Week", file=sys.stderr)
            return 'lastweek'


def prompt_orgs_selection() -> list:
    """Interactive prompt for GitHub organizations."""
    default_orgs = "euroblaze,wapsol"
    print(f"\nEnter GitHub organizations (comma-separated) [{default_orgs}]: ", file=sys.stderr, end='')

    try:
        orgs_input = input().strip()
        if not orgs_input:
            orgs_input = default_orgs
        return [org.strip() for org in orgs_input.split(',') if org.strip()]
    except (EOFError, KeyboardInterrupt):
        print(f"\nUsing default: {default_orgs}", file=sys.stderr)
        return default_orgs.split(',')


def parse_refresh_rate(rate_str: str) -> int:
    """
    Parse refresh rate string to milliseconds.
    Formats: '10s', '30s', '5m', '10m'
    Returns milliseconds, or None if invalid.
    """
    import re

    if not rate_str:
        return None

    match = re.match(r'^(\d+)([sm])$', rate_str.lower())
    if not match:
        print(f"Warning: Invalid refresh rate format '{rate_str}'. Expected format: 10s, 5m, etc.", file=sys.stderr)
        return None

    value = int(match.group(1))
    unit = match.group(2)

    if unit == 's':
        return value * 1000  # seconds to milliseconds
    elif unit == 'm':
        return value * 60 * 1000  # minutes to milliseconds

    return None


def load_env_file(env_file='.env'):
    """Load environment variables from .env file if it exists."""
    try:
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                # Skip empty lines and comments
                if not line or line.startswith('#'):
                    continue
                # Parse KEY=VALUE
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    # Only set if not already in environment
                    if key and key not in os.environ:
                        os.environ[key] = value
    except FileNotFoundError:
        pass  # .env file is optional


def main():
    # Load environment variables from .env file if it exists
    load_env_file()

    parser = argparse.ArgumentParser(
        description='Generate GitHub Engineering Activity Reports (EAR) for GitHub organizations',
        epilog='''
Examples:
  %(prog)s                                              # Interactive mode (prompts for orgs and period)
  %(prog)s --orgs=euroblaze,wapsol --period=week        # This week's activity
  %(prog)s --orgs=euroblaze --period=month              # This month for euroblaze
  %(prog)s --devs=VTV24710 --period=quarter             # Filter specific developer
  %(prog)s --non-interactive                            # Use all defaults without prompts
  %(prog)s --orgs=myorg --period=7d --devs=user1,user2  # Combine all filters

Time Periods:
  lastweek   - Last Week (default)
  week       - This Week (Monday to today)
  7d         - Past 7 Days
  14d        - Past 14 Days
  month      - This Month
  lastmonth  - Last Month
  quarter    - This Quarter
  year       - This Year

Output:
  Reports are saved to: reports/EAR_YYYY-MM-DD.html
        ''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        '--orgs',
        type=str,
        default=None,
        help='Comma-separated list of GitHub organizations (default: interactive prompt or euroblaze,wapsol). Example: euroblaze,wapsol'
    )
    parser.add_argument(
        '--period',
        type=str,
        default=None,
        choices=['lastweek', 'week', '7d', '14d', 'month', 'lastmonth', 'quarter', 'year'],
        help='Time period for the report (default: interactive prompt or lastweek). See examples above for period options.'
    )
    parser.add_argument(
        '--devs',
        type=str,
        default=None,
        help='Comma-separated list of GitHub usernames to filter (default: all developers). Example: VTV24710,euroblaze,daikk115'
    )
    parser.add_argument(
        '--non-interactive',
        action='store_true',
        help='Run without interactive prompts, using defaults or specified flags'
    )
    parser.add_argument(
        '--days',
        type=int,
        default=None,
        help='(Deprecated: use --period instead) Number of days to look back'
    )
    parser.add_argument(
        '--open-browser',
        action='store_true',
        help='Open the generated report in Brave browser after 2 minutes'
    )
    parser.add_argument(
        '--refreshrate',
        type=str,
        default=None,
        help='Auto-refresh rate for live updates in the generated HTML report. Format: 10s, 30s, 5m, 10m (seconds with "s", minutes with "m"). Example: --refreshrate=10s for 10 seconds, --refreshrate=5m for 5 minutes. If not specified, no auto-refresh.'
    )
    parser.add_argument(
        '--odoo-url',
        type=str,
        default=os.environ.get('ODOO_URL', 'https://erp.wapsol.de'),
        help='Odoo server URL (default: ODOO_URL env var or https://erp.wapsol.de)'
    )
    parser.add_argument(
        '--odoo-db',
        type=str,
        default=os.environ.get('ODOO_DB', 'wapsol'),
        help='Odoo database name (default: ODOO_DB env var or wapsol)'
    )
    parser.add_argument(
        '--odoo-user',
        type=str,
        default=os.environ.get('ODOO_USER', 'ashant@simplify-erp.de'),
        help='Odoo username/email (default: ODOO_USER env var or ashant@simplify-erp.de)'
    )
    parser.add_argument(
        '--odoo-password',
        type=str,
        default=None,
        help='Odoo password (alternatively use ODOO_PASSWORD environment variable)'
    )
    parser.add_argument(
        '--include-odoo',
        action='store_true',
        help='Include Odoo helpdesk tickets in the report'
    )
    parser.add_argument(
        '--odoo-only',
        action='store_true',
        help='Generate report with only Odoo helpdesk data (skip GitHub)'
    )

    args = parser.parse_args()

    # Determine if we're in interactive mode
    interactive = not args.non_interactive

    # Parse organizations
    if args.orgs:
        orgs = [org.strip() for org in args.orgs.split(',') if org.strip()]
    elif interactive:
        orgs = prompt_orgs_selection()
    else:
        orgs = ['euroblaze', 'wapsol']

    print(f"\nOrganizations: {', '.join(orgs)}", file=sys.stderr)

    # Determine time period
    if args.days:
        # Legacy --days flag
        print("Warning: --days is deprecated, use --period instead", file=sys.stderr)
        since_date = (datetime.now() - timedelta(days=args.days)).strftime('%Y-%m-%d')
        end_date = datetime.now().strftime('%Y-%m-%d')
        period_label = f'Past {args.days} Days'
    elif args.period:
        since_date, end_date, period_label = calculate_date_range(args.period)
    elif interactive:
        period_code = prompt_period_selection()
        since_date, end_date, period_label = calculate_date_range(period_code)
    else:
        since_date, end_date, period_label = calculate_date_range('lastweek')

    print(f"Period: {period_label} ({since_date} to {end_date})", file=sys.stderr)

    # Parse developer filter
    filter_devs = None
    if args.devs:
        filter_devs = set(dev.strip() for dev in args.devs.split(','))
        print(f"Filtering for developers: {', '.join(filter_devs)}", file=sys.stderr)

    # Parse refresh rate
    refresh_rate_ms = None
    if args.refreshrate:
        refresh_rate_ms = parse_refresh_rate(args.refreshrate)
        if refresh_rate_ms:
            print(f"Auto-refresh enabled: every {args.refreshrate}", file=sys.stderr)

    report_date = datetime.now().strftime('%Y-%m-%d')

    print(f"\nGenerating report for activity from {since_date} to {end_date}...", file=sys.stderr)

    # Fetch GitHub data (unless --odoo-only is specified)
    developer_activity = {}
    if not args.odoo_only:
        data = fetch_recent_activity(orgs, since_date)

        # Aggregate by developer
        print("Aggregating data by developer...", file=sys.stderr)
        developer_activity = aggregate_by_developer(data, filter_devs)

        if not developer_activity:
            print("No GitHub activity found for the specified filters.", file=sys.stderr)
            if not args.include_odoo:
                sys.exit(0)

        print(f"Found activity for {len(developer_activity)} developer(s)", file=sys.stderr)

    # Fetch Odoo data if requested
    odoo_user_activity = None
    if args.include_odoo or args.odoo_only:
        # Get Odoo password from args or environment variable
        odoo_password = args.odoo_password or os.environ.get('ODOO_PASSWORD')

        if not odoo_password:
            print("\nError: Odoo password not provided. Use --odoo-password or set ODOO_PASSWORD environment variable.", file=sys.stderr)
            sys.exit(1)

        print(f"\nConnecting to Odoo at {args.odoo_url}...", file=sys.stderr)
        try:
            odoo = OdooAPI(args.odoo_url, args.odoo_db, args.odoo_user, odoo_password)

            if not odoo.authenticate():
                print("Failed to authenticate with Odoo. Exiting.", file=sys.stderr)
                sys.exit(1)

            # Fetch helpdesk tickets
            tickets = odoo.fetch_helpdesk_tickets(since_date, end_date)

            if not tickets:
                print("No Odoo helpdesk tickets found for the specified period.", file=sys.stderr)
            else:
                print(f"Fetching Odoo metadata (users, partners, stages)...", file=sys.stderr)
                # Fetch related data
                users_map = odoo.fetch_users()
                partners_map = odoo.fetch_partners()
                stages_map = odoo.get_helpdesk_stages()

                # Aggregate tickets by user
                print("Aggregating Odoo tickets by user...", file=sys.stderr)
                odoo_user_activity = aggregate_odoo_tickets_by_user(
                    tickets, users_map, partners_map, stages_map,
                    filter_users=filter_devs  # Use same filter as GitHub devs if provided
                )

                if odoo_user_activity:
                    print(f"Found Odoo activity for {len(odoo_user_activity)} user(s)", file=sys.stderr)
                else:
                    print("No Odoo helpdesk activity found after filtering.", file=sys.stderr)

        except Exception as e:
            print(f"Error fetching Odoo data: {e}", file=sys.stderr)
            import traceback
            traceback.print_exc(file=sys.stderr)
            sys.exit(1)

    # Check if we have any data to report
    if not developer_activity and not odoo_user_activity:
        print("\nNo activity found for the specified filters and sources.", file=sys.stderr)
        sys.exit(0)

    # Generate HTML report
    print("Generating HTML report...", file=sys.stderr)
    html = generate_html_report(developer_activity, report_date, since_date, end_date, period_label, orgs, refresh_rate_ms, odoo_user_activity)

    # Create reports directory if it doesn't exist
    os.makedirs('reports', exist_ok=True)

    # Write report
    output_file = f'reports/EAR_{report_date}.html'
    with open(output_file, 'w') as f:
        f.write(html)

    print(f"\nReport generated successfully: {output_file}", file=sys.stderr)
    print(f"Open in browser: file://{os.path.abspath(output_file)}", file=sys.stderr)

    # Open in browser if requested
    if args.open_browser:
        import time
        import subprocess
        print("\nWaiting 2 minutes before opening in browser...", file=sys.stderr)
        time.sleep(120)  # Wait 2 minutes (120 seconds)
        brave_path = "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser"
        try:
            subprocess.Popen([brave_path, f"file://{os.path.abspath(output_file)}"])
            print(f"Opened report in Brave browser", file=sys.stderr)
        except Exception as e:
            print(f"Failed to open browser: {e}", file=sys.stderr)


if __name__ == '__main__':
    main()
